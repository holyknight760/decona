VSCode를 사용하여 Conda 환경을 Docker 이미지로 저장하는 방법은 다음과 같습니다:

1. Dockerfile 작성: Conda 환경을 Docker 이미지로 변환하려면 먼저 Dockerfile을 작성해야 합니다. 이 Dockerfile은 Conda 환경을 생성하고 필요한 패키지를 설치하는 단계를 포함합니다¹. 예를 들어, Dockerfile은 다음과 같이 보일 수 있습니다:

```dockerfile
FROM continuumio/anaconda3:2020.11
COPY . .
RUN conda env create
RUN conda run -n your-env-name python -m pip install --no-deps -e .
CMD [ "conda", "run", "-n", "your-env-name", "your-command" ]
```

#dockerfile conda install
https://hub.docker.com/r/continuumio/miniconda3/dockerfile
#debian에서 ubuntu로 변경 가능
FROM debian:latest

#  $ docker build . -t continuumio/miniconda3:latest -t continuumio/miniconda3:4.5.11
#  $ docker run --rm -it continuumio/miniconda3:latest /bin/bash
#  $ docker push continuumio/miniconda3:latest
#  $ docker push continuumio/miniconda3:4.5.11

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH

RUN apt-get update --fix-missing && \
    apt-get install -y wget bzip2 ca-certificates curl git && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    /opt/conda/bin/conda clean -tipsy && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

ENV TINI_VERSION v0.16.1
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini

ENTRYPOINT [ "/usr/bin/tini", "--" ]
CMD [ "/bin/bash" ]

#docker 먼저 실행 후, 코드 실행! 
#해당 dockerfile을 빌드하여 이미지 생성 (이름 : decona, circos)
#중간에 설치오류 발생시, 다시 똑같은 코드를 쳐주기!
$ docker build -t decona:v1 .
$ docker build -t circos:v1 .
#https://colevelup.tistory.com/43
#https://ghqls0210.tistory.com/249
#https://jinjinyang.tistory.com/48
#tag 달기!
$ docker tag decona decona:v1
#repository 명명 변경
$ docker tag decona holyknightt/decona:v1
$ docker tag holyknightt/decona_v1 decona
#사용자 이름으로 이미지에 태그 지정: Docker Hub 사용자 이름으로 Docker 이미지에 태그를 지정해야 합니다. Docker Hub 사용자 이름이 Holyknightt인 경우 이미지에 decona:v1이 아닌 Holyknightt/decona:v1 태그를 지정해야 합니다.
$ docker tag decona:v1 holyknightt/decona:v1
#Pushing the Image: After retagging, try pushing the image again with the correct tag:
$ docker push holyknightt/decona:v1

# 기본 이미지로 이전 단계에서 생성한 이미지를 사용
FROM holyknightt/decona:v1

# curl, git, wget 설치
RUN apt-get update && \
    apt-get install -y curl git wget
    
#이 Dockerfile을 사용하여 이미지를 빌드하고 새로운 태그를 지정합니다.
$ docker build -t holyknightt/decona:v2 .

#도커 이미지에서 컨테이너 생성하기, -d, -it 는 각각 background, interactive 를 의미하는 옵션이다. 이 두 옵션을 넣지 않으면 컨테이너 start 후 후속 명령어만 실행 후 바로 exit이 되어버려 내가 원하는 개발을 할 수가 없게 된다.
출처: https://thisisablog.tistory.com/41 [to Memorize:티스토리]
$ docker run -d -it --name decona holyknightt/decona:v1
$ docker run -d -it --name decona holyknightt/decona:v3
#만약 컨테이너를 이미 사용 중이라고 뜬다면, 왼쪽 DOCKER 어플 상에서 start 클릭하기!
#컨테이너 실행 후 터미널을 현재 실행중인 컨테이너에 attach하기
$ docker start decona
$ docker attach decona
$ ls
(base) holyknightt@SME189W2WDP030:/mnt/c/Wild_INU/decona$ docker start decona
decona
(base) holyknightt@SME189W2WDP030:/mnt/c/Wild_INU/decona$ docker attach decona
(base) root@954ac211e14d:/# ls
bin  boot  decona  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
(base) root@954ac211e14d:/#

#컨테이너 이름 변경하기!!
$ docker rename decona decona_v0

#dos2unix 를 사용해서 단일 파일이 아닌 폴더 안에 모든 .pl 확장자를 가진 Perl script를 한번에 수정하는 코드
$ find /decona/external/cdhit/ -type f -name '*.pl' -print0 | xargs -0 dos2unix

#The error message CondaValueError: Malformed version string '~': invalid character(s)
$ conda update -n base -c defaults conda
$ conda clean --all

#https://jinjinyang.tistory.com/48
#실행한 컨테이너의 bash 탈출
$ exit

#commit 명령어로 my-ubuntu 컨테이너를 이미지화 시킴. 이때 egoing라는 레파지토리에 ubuntu-git 태그로 이미지 생성
$ docker commit my-ubuntu egoing:ubuntu-git
$ docker commit decona holyknightt/decona:v2

#Bind Mount 하기, 로컬의 c:/~~~~ 디렉토리를 컨테이너 내부의 mount 폴더에 마운트시켜 실시간 동기화되는 디렉토리로 사용가능. 출처: https://thisisablog.tistory.com/41 [to Memorize:티스토리]
$ docker run -d -it -v c:\~~~~~:/mount 이미지
$ docker run -d -it -v /mnt/d/decona:/mount holyknightt/decona:v2
$ docker run -d -it -v D:\:/decona:/mount holyknightt/decona:v2

#Identify the Container ID or Name
$ docker ps
$ docker ps -a
$ docker inspect <container_id_or_name>
$ docker inspect 04448a11c92c

#decona.yml 파일 내부 보기
$ cat decona.yml
#Here's the modified section of your decona.yml file: 예를 들어, 1.19.x 범위 내에 있는지 확인하려면 numpy=1.19.*로 지정할 수 있습니다. 이렇게 하면 Conda가 1.19 시리즈 내의 모든 버전을 설치할 수 있지만 1.20 이상으로 업그레이드할 수는 없습니다.
dependencies:
  - python=3.8
  # Primary dependencies
  - medaka=1.1.2
  - minimap2=2.17
  - nanofilt=2.7.1
  - qcat=1.1.0
  - racon=1.4.13
  # Numpy is pinned at 1.19.x for compatibility with TensorFlow used by Medaka
  - numpy=1.19.*

#conda 환경에서 폴더 제거하기 (파일 있는)
$ rm -r directory_name

#Removing images
#https://blog.naver.com/qbxlvnf11/222366356297
$ docker rmi holyknightt/decona:v1
# <none> tag 이미지 모두 제거
$ docker rmi $(docker images -f "dangling=true" -q)
#Docker image를 새로 pull 해보기 전에 기존 image를 삭제해 줍시다. -f 옵션을 넣으면 컨테이너까지 삭제합니다.
$ docker rmi -f [이미지_id]
$ docker rmi -f decona:v1

#Pushing images to a registry
$ docker push holyknightt/decona:v1

#Pulling images from a registry
$ docker pull holyknightt/decona:v1

$ docker scout quickview
 View vulnerabilities → docker scout cves local://decona:latest
  View base image update recommendations → docker scout recommendations local://decona:latest
  Include policy results in your quickview by supplying an organization → docker scout quickview local://decona:latest --org <organization>

#docker login at powershell or WSL
(base) PS C:\Wild_INU\decona> docker login
Username (holyknightt): holyknightt
Password: 
(base) PS C:\Wild_INU\decona> docker images

2. **VSCode Dev Containers 확장 프로그램 설치**: VSCode에서 Docker 컨테이너 내에서 개발을 진행하려면 Dev Containers 확장 프로그램을 설치해야 합니다². 이 확장 프로그램은 컨테이너를 전체 기능 개발 환경으로 사용할 수 있게 해줍니다.

3. **devcontainer.json 파일 생성**: 프로젝트의 `.devcontainer` 디렉토리에 `devcontainer.json` 파일을 생성합니다. 이 파일은 VSCode에게 어떻게 개발 컨테이너에 액세스하거나 생성할 수 있는지 알려줍니다². 예를 들어, `devcontainer.json` 파일은 다음과 같이 보일 수 있습니다:

```json
{
  "name": "Your Project Name",
  "dockerFile": "Dockerfile",
  "settings": {
    "terminal.integrated.shell.linux": "/bin/bash"
  },
  "extensions": ["your-required-vscode-extensions"]
}
```

4. **Docker 이미지 빌드 및 실행**: 이제 VSCode에서 `F1 > Dev Containers: Rebuild Container`를 선택하여 Docker 이미지를 빌드하고 실행할 수 있습니다⁴.

이러한 단계를 통해 Conda 환경을 Docker 이미지로 저장하고 VSCode에서 해당 이미지를 사용하여 개발을 진행할 수 있습니다. 이 방법은 Conda 환경의 종속성을 관리하고 일관된 개발 환경을 유지하는 데 도움이 됩니다¹².

출처: Bing과의 대화, 2023. 11. 9.
(1) Deploying conda environments in (Docker) containers - how to do it right - Uwe’s Blog. https://uwekorn.com/2021/03/01/deploying-conda-environments-in-docker-how-to-do-it-right.html.
(2) Developing inside a Container using Visual Studio Code Remote Development. https://code.visualstudio.com/docs/devcontainers/containers.
(3) How can I use a local image using vscode-devcontainer. https://stackoverflow.com/questions/74217946/how-can-i-use-a-local-image-using-vscode-devcontainer.
(4) docker - How can I use an env file to pass environment variables into a standalone .... https://stackoverflow.com/questions/58227845/how-can-i-use-an-env-file-to-pass-environment-variables-into-a-standalone-vscode.
(5) Converting conda/pip environments into Docker Images. https://towardsdatascience.com/converting-conda-pip-environments-into-docker-images-d02aa22e872c.
(6) undefined. https://my.com/.