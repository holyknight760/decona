VSCode를 사용하여 Conda 환경을 Docker 이미지로 저장하는 방법은 다음과 같습니다:

1. Dockerfile 작성: Conda 환경을 Docker 이미지로 변환하려면 먼저 Dockerfile을 작성해야 합니다. 이 Dockerfile은 Conda 환경을 생성하고 필요한 패키지를 설치하는 단계를 포함합니다¹. 예를 들어, Dockerfile은 다음과 같이 보일 수 있습니다:

```dockerfile
FROM continuumio/anaconda3:2020.11
COPY . .
RUN conda env create
RUN conda run -n your-env-name python -m pip install --no-deps -e .
CMD [ "conda", "run", "-n", "your-env-name", "your-command" ]
```

#dockerfile conda install
https://hub.docker.com/r/continuumio/miniconda3/dockerfile
#debian에서 ubuntu로 변경 가능
FROM debian:latest

#  $ docker build . -t continuumio/miniconda3:latest -t continuumio/miniconda3:4.5.11
#  $ docker run --rm -it continuumio/miniconda3:latest /bin/bash
#  $ docker push continuumio/miniconda3:latest
#  $ docker push continuumio/miniconda3:4.5.11

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH

RUN apt-get update --fix-missing && \
    apt-get install -y wget bzip2 ca-certificates curl git && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    /opt/conda/bin/conda clean -tipsy && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

ENV TINI_VERSION v0.16.1
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini

ENTRYPOINT [ "/usr/bin/tini", "--" ]
CMD [ "/bin/bash" ]

#docker 먼저 실행 후, 코드 실행! 
#해당 dockerfile을 빌드하여 이미지 생성 (이름 : decona, circos) from  중간에 설치오류 발생시, 다시 똑같은 코드를 쳐주기!
$ docker build -t decona:v1 .
$ docker build -t holyknightt/circos:v1 .
#https://colevelup.tistory.com/43
#https://ghqls0210.tistory.com/249
#https://jinjinyang.tistory.com/48
#tag 달기!
$ docker tag decona decona:v1
#repository 명명 변경
$ docker tag decona holyknightt/decona:v1
$ docker tag holyknightt/decona_v1 decona
$ docker tag circos:v1 holyknightt/circos:v1
#사용자 이름으로 이미지에 태그 지정: Docker Hub 사용자 이름으로 Docker 이미지에 태그를 지정해야 합니다. Docker Hub 사용자 이름이 Holyknightt인 경우 이미지에 decona:v1이 아닌 Holyknightt/decona:v1 태그를 지정해야 합니다.
$ docker tag decona:v1 holyknightt/decona:v1
#Pushing the Image to web: After retagging, try pushing the image again with the correct tag:
#push 전에 commit 명령어로 컨테이너와 이미지를 함께 저장하기!! 필수!!
$ docker push holyknightt/decona:v1
$ docker push holyknightt/circos:v2
$ docker push holyknightt/circos:v3
$ docker push holyknightt/circos:v4
$ docker push holyknightt/circos:v5

# 기본 이미지로 이전 단계에서 생성한 이미지를 사용
FROM holyknightt/decona:v1

# curl, git, wget 설치
RUN apt-get update && \
    apt-get install -y curl git wget
    
#이 Dockerfile을 사용하여 이미지를 빌드하고 새로운 태그를 지정합니다.
$ docker build -t holyknightt/decona:v2 .

#도커 이미지에서 컨테이너 생성하기, -d, -it 는 각각 background, interactive 를 의미하는 옵션이다. 이 두 옵션을 넣지 않으면 컨테이너 start 후 후속 명령어만 실행 후 바로 exit이 되어버려 내가 원하는 개발을 할 수가 없게 된다.
출처: https://thisisablog.tistory.com/41 [to Memorize:티스토리]
$ docker run -d -it --name decona holyknightt/decona:v1
$ docker run -d -it --name decona holyknightt/decona:v3
$ docker run -d -it --name circos_v1 holyknightt/circos:v1
$ docker run -d -it --name circos_v2 holyknightt/circos:v2
$ docker run -d -it --name circos_v3 holyknightt/circos:v3
$ docker run -d -it --name circos_v4 holyknightt/circos:v4
$ docker run -d -it --name circos_v5 holyknightt/circos:v5
$ docker run -d -it --name circos_v6 holyknightt/circos:v6

(base) holyknightt@SME189W2WDP030:/mnt/c/Wild_INU/decona$ docker run -d -it --name circos_v1 holyknightt/circos:v1
3a349d66fca672c32889654524c5d16067534ec5d385ff8bfbbecf51100fdb53
#만약 컨테이너를 이미 사용 중이라고 뜬다면, 왼쪽 DOCKER 어플 상에서 start 클릭하기!
#컨테이너 실행 후 터미널을 현재 실행중인 컨테이너에 attach하기
$ docker start decona
$ docker start circos_v3
$ docker attach decona
$ docker attach circos_v3
$ ls
(base) holyknightt@SME189W2WDP030:/mnt/c/Wild_INU/decona$ docker start decona
decona
(base) holyknightt@SME189W2WDP030:/mnt/c/Wild_INU/decona$ docker attach decona
(base) root@954ac211e14d:/# ls
bin  boot  decona  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

(base) holyknightt@SME189W2WDP030:/mnt/c/Wild_INU/decona$ docker start circos_v1
circos_v1
(base) holyknightt@SME189W2WDP030:/mnt/c/Wild_INU/decona$ docker attach circos_v1
(base) root@3a349d66fca6:/# ls
bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
(base) root@3a349d66fca6:/#
(base) root@49b32e312e43:/software/circos/current# bin/circos -modules
ok       1.52 Carp
missing            Clone
missing            Config::General
ok       3.80 Cwd
ok      2.179 Data::Dumper
ok       2.58 Digest::MD5
ok       2.85 File::Basename
ok       3.80 File::Spec::Functions
ok     0.2311 File::Temp
ok       1.52 FindBin
missing            Font::TTF::Font
missing            GD
missing            GD::Polyline
ok       2.52 Getopt::Long
ok       1.46 IO::File
missing            List::MoreUtils
ok       1.55 List::Util
missing            Math::Bezier
ok   1.999818 Math::BigFloat
missing            Math::Round
missing            Math::VecStat
ok    1.03_01 Memoize
ok       1.97 POSIX
missing            Params::Validate
ok       2.01 Pod::Usage
missing            Readonly
missing            Regexp::Common
missing            SVG
missing            Set::IntSpan
missing            Statistics::Basic
ok       3.23 Storable
ok       1.23 Sys::Hostname
ok       2.04 Text::Balanced
missing            Text::Format
ok     1.9767 Time::HiRes
(base) root@49b32e312e43:/software/circos/current# perl -MCPAN -e shell

CPAN.pm requires configuration, but most of it can be done automatically.
If you answer 'no' below, you will enter an interactive dialog for each
configuration option instead.

Would you like to configure as much as possible automatically? [yes] yes


ALERT: 'make' is an essential tool for building perl Modules.
Please make sure you have 'make' (or some equivalent) working.


Autoconfiguration complete.

commit: wrote '/root/.cpan/CPAN/MyConfig.pm'

You can re-run configuration any time with 'o conf init' in the CPAN shell
Terminal does not support AddHistory.

To fix that, maybe try>  install Term::ReadLine::Perl


cpan shell -- CPAN exploration and modules installation (v2.28)
Enter 'h' for help.

cpan[1]> install Math::Bezier
Fetching with HTTP::Tiny:
http://www.cpan.org/authors/01mailrc.txt.gz
Reading '/root/.cpan/sources/authors/01mailrc.txt.gz'
............................................................................DONE
Fetching with HTTP::Tiny:
http://www.cpan.org/modules/02packages.details.txt.gz
Reading '/root/.cpan/sources/modules/02packages.details.txt.gz'
  Database was generated on Wed, 06 Dec 2023 05:54:04 GMT
  HTTP::Date not available
..............
  New CPAN.pm version (v2.36) available.
  [Currently running version is v2.28]
  You might want to try
    install CPAN
    reload cpan
  to both upgrade CPAN.pm and run the new version without leaving
  the current session.


..............................................................DONE
Fetching with HTTP::Tiny:
http://www.cpan.org/modules/03modlist.data.gz
Reading '/root/.cpan/sources/modules/03modlist.data.gz'
DONE
Writing /root/.cpan/Metadata
Running install for module 'Math::Bezier'
Fetching with HTTP::Tiny:
http://www.cpan.org/authors/id/A/AB/ABW/Math-Bezier-0.01.tar.gz
Fetching with HTTP::Tiny:
http://www.cpan.org/authors/id/A/AB/ABW/CHECKSUMS
Checksum for /root/.cpan/sources/authors/id/A/AB/ABW/Math-Bezier-0.01.tar.gz ok
Scanning cache /root/.cpan/build for sizes
DONE
'YAML' not installed, will not store persistent state
Configuring A/AB/ABW/Math-Bezier-0.01.tar.gz with Makefile.PL
Checking if your kit is complete...
Looks good
Generating a Unix-style Makefile
Writing Makefile for Math::Bezier
Writing MYMETA.yml and MYMETA.json
  ABW/Math-Bezier-0.01.tar.gz
  /usr/bin/perl Makefile.PL INSTALLDIRS=site -- OK
Running make for A/AB/ABW/Math-Bezier-0.01.tar.gz
Can't exec "make": No such file or directory at /usr/share/perl/5.34/CPAN/Distribution.pm line 2345.
  ABW/Math-Bezier-0.01.tar.gz
  make -- NOT OK
  No such file or directory
Failed during this command:
 ABW/Math-Bezier-0.01.tar.gz                  : make NO

cpan[2]> 
#설치된 tool의 리스트 나열!
> apt list --installed
#설치된 tool 제거!
> apt remove package_name

#make, gcc, pkg-config, gdlib가 없어서 docker 내에 설치가 필요할 때, Perl 모듈을 빌드하는 데 필요한 중요한 도구! 
> apt-get update
> apt-get install make
> apt-get install gcc
> apt-get install pkg-config
> apt-get install libgd-dev
#gimp png 이미지 파일을 읽을 때 필요한 도구!
> apt-get install gimp
(base) root@f71e1d3555ad:~/circos-course/session/6/2# apt-get install gimp
> gimp circos.png
#gimp 도구를 깔았으나, 결국엔 열리지 않음. 도커에 완전한 리눅스 시스템을 설치한 것이 아니기 때문에 복잡한 프로그램은 따로 코딩이 필요!!
(base) root@f71e1d3555ad:~/circos-course/session/6/2# gimp circos.png
Cannot open display: 
#gimp 대신에 가벼운 feh 설치를 시도해봄. 
> apt-get install feh
#feh도 실패함. 
#img2txt라는 이미지를 문자로 변환해서 보는 방법인데, 간략히 구조만 볼 때, 사용 가능!
> apt-get install caca-utils
> img2txt -W 150 circos.png > circos.txt
> cat circos.txt

#컨테이너 내부에서 빠져나오기, 컨테이너 내부에서 도커 환경으로 빠져나오는 방법에는 셸에서 exit 를 입력하거나 Ctrl + D 를 동시에 입력하는 방법이다.
#https://bio-info.tistory.com/137

#컨테이너 이름 변경하기!!
$ docker rename decona decona_v0

#docker cp 이동할파일 이동할 위치 로 사용할 수 있다. 
#만약, docker 폴더에 이동할 파일을 로컬에 있는 파일에서 옮기고 싶다면 로컬 파일위치 docker이름:폴더위치 정도로 하면 되고.
#host > 도커
#docker cp local 파일위치 docker이름:이동할 폴더 위치
에
$ sudo docker cp /mnt/c/users/holyknightt/Downloads/circos-0.69-9.tgz circos_v1:/software/circos
$ sudo docker cp /mnt/c/users/holyknightt/Downloads/circos/circos-0.69-9/example/run_ticks circos_v3:/software/circos/current/example
$ sudo docker cp /mnt/c/Users/MSI/Downloads/circos-course circos_v5:/software/circos/current/example
$ sudo docker cp /mnt/d/circos/circos-course circos_v6:/root
#(qiime2-2023.5) holyknightt@SME189W2WDP030:/mnt/d/ticks/ticks_240206/16s$ sudo docker cp /mnt/d/circos/circos-course circos_v6:/root
#[sudo] password for holyknightt: 12416256a
#Successfully copied 1.05GB to circos_v6:/root
#체체파리 & tick 데이터로 circos 그리기!!
#(base) root@f71e1d3555ad:~/circos-course/session/1/1/etc/etc#
$ sudo docker cp /mnt/c/users/holyknightt/Downloads/karyotype.and.layout.conf circos_v6:/root/circos-course/session/2/etc
$ sudo docker cp /mnt/c/users/holyknightt/Downloads/tsetse.txt circos_v6:/software/circos/circos-0.69-9/data/karyotype
$ sudo docker cp /mnt/c/users/holyknightt/Downloads/circos-course-2017.tgz circos_v6:/root
$ sudo docker cp /mnt/c/Users/MSI/Downloads/karyotype.and.layout.conf circos_v6:/root/circos-course/session/2/etc
$ sudo docker cp /mnt/c/Users/MSI/Downloads/tsetse.txt circos_v6:/software/circos/circos-0.69-9/data/karyotype
$ sudo docker cp /mnt/c/Users/MSI/Downloads/image.conf circos_v6:/root/circos-course/session/etc
$ sudo docker cp /mnt/c/Users/MSI/Downloads/Configuration.pm circos_v6:/software/circos/circos-0.69-9/bin/../lib/Circos
$ sudo docker cp /mnt/c/Users/MSI/Downloads/tsetse.txt circos_v6:/root/circos-course/session/7/data
$ sudo docker cp /mnt/c/Users/holyknightt/Downloads/etc circos_v6:/root/circos-course/session/1/1/etc
#circos 작동은 반드시 session subfolder에서 실행! svg 파일도 추출하고 싶으면 -svg 명령어 추가 
#(base) root@f71e1d3555ad:~/circos-course/session/7/1# circos -svg

#도커 내 파일 이동
> mv /software/circos/current/example/circos-course /root
> mv /root/circos-course/session/1/etc/ticks.conf /root/circos-course/session/1/1/etc
> mv /root/circos-course/session/etc/image.conf /root/circos-course/session/1/1/etc

#도커 내 파일 복사
> cp /software/circos/current/etc/colors_fonts_patterns.conf /root/circos-course/session/1/1/etc
> cp /software/circos/current/etc/housekeeping.conf /root/circos-course/session/1/1/etc

#도커 내 파일 수정 (nano), F9 한줄 삭제 
> apt-get update && apt-get install nano
> nano circos.conf
#Make your changes in the editor. With nano, you can save changes by pressing Ctrl + O and exit the editor by pressing Ctrl + X.

#도커 내 파일 보기 (cat)
> cat circos.conf

(base) holyknightt@SME189W2WDP030:/mnt/c/users/holyknightt/Downloads$ sudo docker cp /mnt/c/users/holyknightt/Downloads/circos-0.69-9.tgz circos_v1:/software/circos
[sudo] password for holyknightt: 12461256aA
Sorry, try again.
[sudo] password for holyknightt:
Successfully copied 29.8MB to circos_v1:/software/circos
(base) root@3a349d66fca6:/software/circos# ls
circos-0.69-9.tgz

#도커 > host
#docker cp docker이름:이동할 파일 위치 local 폴더위치

$ sudo docker cp circos_v3:/software/circos/current/example /mnt/c/users/holyknightt/Downloads
$ sudo docker cp circos_v4:/circos.png /mnt/c/users/holyknightt/Downloads
$ sudo docker cp circos_v5:/software/circos/current/example/etc /mnt/c/Users/MSI/Downloads
(base) holyknightt@DESKTOP-2PB6NR2:/mnt/c/Users/MSI/Documents/GitHub/decona$ sudo docker cp circos_v5:/software/circos/current/example/etc /mnt/c/Users/MSI/Downloads
[sudo] password for holyknightt: 스페이스 한칸 (MSI 노트북)
(base) holyknightt@SME189W2WDP030:~$ sudo docker cp circos_v3:/software/circos/current/example /mnt/c/users/holyknightt/Downloads
[sudo] password for holyknightt: 12416256a
Successfully copied 13.3MB to /mnt/c/users/holyknightt/Downloads
$ sudo docker cp circos_v5:/root/circos-course/session/1/1/etc/circos.png /mnt/c/Users/MSI/Downloads
$ sudo docker cp circos_v6:/root/circos-course/session/2/1/circos.png /mnt/c/users/holyknightt/Downloads
$ sudo docker cp circos_v6:/root/circos-course/session/2/1/circos.png /mnt/c/Users/MSI/Downloads
$ sudo docker cp circos_v6:/root/circos-course/session/1/1/etc/etc/circos.png /mnt/c/Users/holyknightt/Downloads
$ sudo docker cp circos_v6:/root/circos-course/session/7/1/circos.svg /mnt/c/Users/holyknightt/Downloads

#dos2unix 를 사용해서 단일 파일이 아닌 폴더 안에 모든 .pl 확장자를 가진 Perl script를 한번에 수정하는 코드
$ find /decona/external/cdhit/ -type f -name '*.pl' -print0 | xargs -0 dos2unix

#The error message CondaValueError: Malformed version string '~': invalid character(s)
$ conda update -n base -c defaults conda
$ conda clean --all

#https://jinjinyang.tistory.com/48
#실행한 컨테이너의 bash 탈출
> exit

#commit 명령어로 my-ubuntu 컨테이너를 이미지화 시킴. 이때 egoing라는 레파지토리 (web)에 ubuntu-git 태그로 이미지 생성
#이후에 도커 이미지를 web에서 pull하고, pull된 도커 이미지에 대한 container를 따로 다시 제작해야 함. 
#다시금 web에 도커 이미지를 올리려면 push 명령어 실행이 필요!! web에 컨테이너와 함께 이미지를 올려야 함.  
$ docker commit my-ubuntu egoing:ubuntu-git
$ docker commit decona holyknightt/decona:v2
$ docker commit circos_v1 holyknightt/circos:v2
$ docker commit circos_v2 holyknightt/circos:v3
$ docker commit circos_v3 holyknightt/circos:v4
$ docker commit circos_v4 holyknightt/circos:v5
$ docker commit circos_v5 holyknightt/circos:v6

#Bind Mount 하기, 로컬의 c:/~~~~ 디렉토리를 컨테이너 내부의 mount 폴더에 마운트시켜 실시간 동기화되는 디렉토리로 사용가능. 출처: https://thisisablog.tistory.com/41 [to Memorize:티스토리]
$ docker run -d -it -v c:\~~~~~:/mount 이미지
$ docker run -d -it -v /mnt/d/decona:/mount holyknightt/decona:v2
$ docker run -d -it -v D:\:/decona:/mount holyknightt/decona:v2

#Identify the Container ID or Name
$ docker ps
$ docker ps -a
$ docker inspect <container_id_or_name>
$ docker inspect 04448a11c92c

#decona.yml 파일 내부 보기
$ cat decona.yml
#Here's the modified section of your decona.yml file: 예를 들어, 1.19.x 범위 내에 있는지 확인하려면 numpy=1.19.*로 지정할 수 있습니다. 이렇게 하면 Conda가 1.19 시리즈 내의 모든 버전을 설치할 수 있지만 1.20 이상으로 업그레이드할 수는 없습니다.
dependencies:
  - python=3.8
  # Primary dependencies
  - medaka=1.1.2
  - minimap2=2.17
  - nanofilt=2.7.1
  - qcat=1.1.0
  - racon=1.4.13
  # Numpy is pinned at 1.19.x for compatibility with TensorFlow used by Medaka
  - numpy=1.19.*

#conda 환경에서 폴더 제거하기 (파일 있는)
$ rm -r directory_name

#Removing images
#https://blog.naver.com/qbxlvnf11/222366356297
$ docker rmi holyknightt/decona:v1
# <none> tag 이미지 모두 제거
$ docker rmi $(docker images -f "dangling=true" -q)
# 중지된 컨테이너 제거: `docker rm` 명령 뒤에 컨테이너 ID (92d0131c6757)를 사용하여 중지된 컨테이너를 제거할 수 있습니다.
$ docker rm 92d0131c6757

#Docker image를 새로 pull 해보기 전에 기존 image를 삭제해 줍시다. -f 옵션을 넣으면 컨테이너까지 삭제합니다.
$ docker rmi -f [이미지_id]
$ docker rmi -f decona:v1
$ docker rmi -f circos:v1
$ docker rmi -f holyknightt/circos:v5

#Pushing images to a registry (web), web에 있는 도커 이미지를 pull로 하드에 다운 받아야 start 명령어가 가능! 
$ docker push holyknightt/decona:v1
$ docker push holyknightt/circos:v1
$ docker push holyknightt/circos:v2
$ docker push holyknightt/circos:v3
$ docker push holyknightt/circos:v4
$ docker push holyknightt/circos:v6

#Pulling images from a registry (web), start 명령어 입력 전에 container를 제작해야 함. 
#run 명령어로 컨테이너 제작이 가능함. 
$ docker pull holyknightt/decona:v1
$ docker pull holyknightt/circos:v2
$ docker pull holyknightt/circos:v4
$ docker pull holyknightt/circos:v5
$ docker pull holyknightt/circos:v6

$ docker scout quickview
 View vulnerabilities → docker scout cves local://decona:latest
  View base image update recommendations → docker scout recommendations local://decona:latest
  Include policy results in your quickview by supplying an organization → docker scout quickview local://decona:latest --org <organization>

#https://blog.naver.com/PostView.naver?blogId=qbxlvnf11&logNo=222439207002&directAccess=false
#도커 이미지를 압축파일로 저장하기! - Docker save (docer image → tar file)
# sudo docker save -o file_name.tar image_name
$ sudo docker save -o circos.tar holyknightt/circos:v5
$ sudo docker save -o circos.tar holyknightt/circos:v6

#압축파일로 저장된 도커 이미지를 불러오기! - Docker load (tar file → docker image)
#도커 이미지를 불러온 후, start & attach로 도커 환경 불러오기!
# sudo docker load -i file_name.tar
$ sudo docker load -i circos.tar
(base) holyknightt@DESKTOP-2PB6NR2:/mnt/c/Users/MSI/Downloads$ sudo docker load -i circos.tar
[sudo] password for holyknightt: 
8ceb9643fb36: Loading layer [==================================================>]  80.37MB/80.37MB
4d30ee999136: Loading layer [==================================================>]  79.47MB/79.47MB
f6b51628efcb: Loading layer [==================================================>]  229.3MB/229.3MB
a9701e15c842: Loading layer [==================================================>]  22.53kB/22.53kB                
427e44c01b14: Loading layer [==================================================>]  22.53kB/22.53kB                
50e171feb089: Loading layer [==================================================>]  110.5MB/110.5MB
05669a8a9c39: Loading layer [==================================================>]  371.7MB/371.7MB
b6064d148e5b: Loading layer [==================================================>]  6.313MB/6.313MB
7f8e53f47bca: Loading layer [==================================================>]  88.62MB/88.62MB
Loaded image: holyknightt/circos:v5

#docker login at powershell or WSL
(base) PS C:\Wild_INU\decona> docker login
Username (holyknightt): holyknightt
Password: 
(base) PS C:\Wild_INU\decona> docker images

2. **VSCode Dev Containers 확장 프로그램 설치**: VSCode에서 Docker 컨테이너 내에서 개발을 진행하려면 Dev Containers 확장 프로그램을 설치해야 합니다². 이 확장 프로그램은 컨테이너를 전체 기능 개발 환경으로 사용할 수 있게 해줍니다.
3. **devcontainer.json 파일 생성**: 프로젝트의 `.devcontainer` 디렉토리에 `devcontainer.json` 파일을 생성합니다. 이 파일은 VSCode에게 어떻게 개발 컨테이너에 액세스하거나 생성할 수 있는지 알려줍니다². 예를 들어, `devcontainer.json` 파일은 다음과 같이 보일 수 있습니다:
```json
{
  "name": "Your Project Name",
  "dockerFile": "Dockerfile",
  "settings": {
    "terminal.integrated.shell.linux": "/bin/bash"
  },
  "extensions": ["your-required-vscode-extensions"]
}
```
4. **Docker 이미지 빌드 및 실행**: 이제 VSCode에서 `F1 > Dev Containers: Rebuild Container`를 선택하여 Docker 이미지를 빌드하고 실행할 수 있습니다⁴.
이러한 단계를 통해 Conda 환경을 Docker 이미지로 저장하고 VSCode에서 해당 이미지를 사용하여 개발을 진행할 수 있습니다. 이 방법은 Conda 환경의 종속성을 관리하고 일관된 개발 환경을 유지하는 데 도움이 됩니다¹².

linux 암호변경!
$ sudo passwd
[sudo] password for holyknightt: 스페이스 한칸_학교 컴퓨터


